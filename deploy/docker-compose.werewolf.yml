version: "3.8"

services:
  # MongoDB Database
  mongodb:
    build:
      context: ../mongodb
      dockerfile: Dockerfile.mongodb
    container_name: werewolf-mongodb
    restart: unless-stopped
    environment:
      MONGO_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_APP_USERNAME: ${MONGO_APP_USERNAME:-werewolf_user}
      MONGO_APP_PASSWORD: ${MONGO_APP_PASSWORD:-werewolf_password}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - werewolf-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.backend
    container_name: werewolf-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://${MONGO_APP_USERNAME:-werewolf_user}:${MONGO_APP_PASSWORD:-werewolf_password}@mongodb:27017/werewolf
      - JWT_SECRET=${JWT_SECRET}
      - SERVER_URL=${SERVER_URL}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    env_file:
      - .env
    volumes:
      - backend_logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - werewolf-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.frontend
    container_name: werewolf-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - VITE_SERVER_URL=${VITE_SERVER_URL:-http://localhost:3000}
      - VITE_SOCKET_URL=${VITE_SOCKET_URL:-ws://localhost:3000}
    volumes:
      - frontend_build:/app/dist
    depends_on:
      - backend
    networks:
      - werewolf-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4173"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Web Server
  nginx:
    build:
      context: ../nginx
      dockerfile: Dockerfile.nginx
    container_name: werewolf-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # SSL証明書（Let's Encrypt）
      - ssl_certs:/etc/letsencrypt:ro
      # フロントエンドビルドファイル
      - frontend_build:/var/www/werewolf-app/frontend/build:ro
      # ログファイル
      - nginx_logs:/var/log/nginx
      # SSL設定ファイル
      - ../nginx/nginx-ssl.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - werewolf-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Let's Encrypt Certificate Manager
  certbot:
    image: certbot/certbot:latest
    container_name: werewolf-certbot
    restart: unless-stopped
    volumes:
      - ssl_certs:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME} -d www.${DOMAIN_NAME}
    depends_on:
      - nginx
    networks:
      - werewolf-network
    profiles:
      - ssl

volumes:
  mongodb_data:
    driver: local
  backend_logs:
    driver: local
  frontend_build:
    driver: local
  nginx_logs:
    driver: local
  ssl_certs:
    driver: local
  certbot_webroot:
    driver: local

networks:
  werewolf-network:
    driver: bridge
